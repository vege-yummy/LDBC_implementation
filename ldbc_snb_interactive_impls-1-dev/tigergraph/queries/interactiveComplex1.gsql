CREATE OR REPLACE QUERY interactiveComplex1(vertex<Person> personId, STRING firstName) for graph LDBC_SNB SYNTAX v2 {
    TYPEDEF TUPLE<VERTEX<Person> v, INT distance, STRING lastName, INT id> friendInfo;

    HeapAccum<friendInfo>(20, distance ASC, lastName ASC, id ASC) @@friendInfoTop;
    SumAccum<UINT> @distance = 0;
    SetAccum<VERTEX<Person>> @@friends;

    SumAccum<string> @friendCityName;
    MapAccum<INT, INT> @personInfo;

    INT i = 0;

    S = { personId };
    WHILE i < 3 DO
        S =
            SELECT t
              FROM S:s-(KNOWS)-Person:t
             WHERE t.@distance == 0 AND t != personId
             ACCUM t.@distance = (i+1)
            POST-ACCUM
                CASE WHEN t.firstName == firstName THEN
                    @@friendInfoTop += friendInfo(t, t.@distance, t.lastName, t.id)
                END;

        IF @@friendInfoTop.size() >= 20 THEN BREAK; END;
        i = i + 1;
    END;

    FOREACH f IN @@friendInfoTop DO
        @@friends += f.v;
    END;

    P = {@@friends};
    tmp =
        SELECT ct
          FROM P:p -(IS_LOCATED_IN>)- City:ct
         ACCUM p.@friendCityName = ct.name;

    ListAccum<ListAccum<STRING>> @companies;
    tmp =
        SELECT cn
          FROM P:p -(WORK_AT>:ew)- Company:co -(IS_LOCATED_IN>)- Country:cn
        PER MATCH
        ACCUM p.@companies += [co.name, to_string(ew.workFrom), cn.name];

    ListAccum<ListAccum<STRING>> @universities;
    tmp =
        SELECT ct
          FROM P:p -(STUDY_AT>:es)-University:u -(IS_LOCATED_IN>)- City:ct
        PER MATCH
        ACCUM p.@universities += [u.name, to_string(es.classYear), ct.name];
    P =
        SELECT p
          FROM P:p
        ORDER BY p.@distance ASC, p.lastName ASC, p.id ASC
        LIMIT 20;

    print P[
        P.id AS friendId,
        P.lastName AS friendLastName,
        P.@distance AS distanceFromPerson,
        P.birthday AS friendBirthday,
        P.creationDate AS friendCreationDate,
        P.gender AS friendGender,
        P.browserUsed AS friendBrowserUsed,
        P.locationIP AS friendLocationIp,
        P.email AS friendEmails,
        P.speaks AS friendSpeaks,
        P.@friendCityName AS friendCityName,
        P.@companies AS friendCompanies,
        P.@universities as friendUniversities
    ] as result;
}